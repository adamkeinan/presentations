//- Use the presentation layout so we can keep this clean
extends layouts/presentation

block append config
  -
    config.theme = 'lengstorf';
    config.title = 'Make the Right Thing the Easy Thing';
    config.description = 'How to Design Systems and Processes Teams Actually Follow';

    config.author = {
      name: 'Jason Lengstorf',
      email: 'jason@lengstorf.com',
      link: 'https://lengstorf.com/',
      twitter: 'jlengstorf',
      github: 'jlengstorf',
    };
    
    config.slides = {
      link: 'https://git.io/right-thing-easy-thing',
    };

    config.conference = {
      hashtag: 'LeadDevNewYork',
      twitter: 'theleaddev',
    };
  -

//- Add your slides here. See templates/includes/_mixins.pug for information 
//- on how `+slide` works.
block slides
  +slide
    h1(style="font-size: 80px; width: 110%; margin-left: -5%; margin-top: 80px;")= config.title
    h3(style="font-size: 40px; width: 110%; margin-left: -5%;")= config.description
    
    p by 
      a(href= config.author.link)= config.author.name
      br
      small
        a(href= `https://twitter.com/${config.author.twitter}`)= `@${config.author.twitter}`
        | &nbsp; · &nbsp;
        a(href= `mailto:${config.author.email}`)= config.author.email
    
    p
      small Slides: #[a(href= config.slides.link)= config.slides.link.replace('https://', '')]
    
  +slide
    h1
      span.hugify Team work
  
  +slide
    h2 As lead developers, 
      span.hugify.alright-calm-down-a-little it’s our job
      span(style="display: block; font-size: 113%") to keep our team 
      em(style="font-size: 237%") running
    
    aside.notes.
      As lead developers, we’re the glue holding our teams together. We provide
      support, leadership, and mentoring to our team members. Our managers and
      other non-technical leadership relies on us to keep the wheels on.

  +slide
    h3 When the pressure is on...
    p TKTK GIF of DOOOOOOOOOOOOOooooooooommmmmmmm...

  +slide
    h3 When the pressure is on
      br
      | we have two choices
    div(style="display: flex; justify-content: space-between;")
      div.fragment(style="width: 45%")
        img(
          src="./images/building-quality-driven-culture/but-its-hard.gif"
          alt="TKTK replace this with complicated GIF"
          style="display: block;"
        )
        h4 Fix the process
      div.fragment(style="width: 45%")
        img(
          src="./images/building-quality-driven-culture/but-its-hard.gif"
          alt="TKTK replace this with badass hero GIF"
          style="display: block;"
        )
        h4 Fix the problem
    
    aside.notes.
      When deadline pressure is on and our team is struggling to keep up, we
      have two options to get us across the finish line: 1) we can figure out
      what’s slowing down the team and try to fix that, or 2) we can be the
      rockstar developer every recruiter dreams of and single-handedly solve
      the problem.

  +slide
    h2 Being the team’s
      em.hugify rockstar
      | feels 
      span.underlined really
      |  good
    
    aside.notes.
      It feels great to be the hero: you pull off a miracle and finish the
      project on time; your team is relieved and grateful; your manager is
      happy; it typically leads to public praise and potentially promotions,
      raises, and other rewards.
  
  +slide
    h2 Being the team’s
      strong.hugify auditor
      | feels... less good
    
    aside.notes.
      Digging into the underlying causes of team inefficiencies isn’t typically
      considered a good time. It’s hard to communicate the business value of it,
      and typically management will push back if you try to focus on underlying
      problems instead of putting out immediate fires. There are not usually
      rewards, recognition, or even gratitude for pursuing this option. This is
      not glamorous or high-profile work.
  
  +slide
    h2 There’s just one
      strong.hugify problem

  +slide
    h2
      span.hugify.alright-calm-down-a-little Rockstars
      | don’t get 
      span.underlined days off
    
    aside.notes.
      If you’re the only reason your team hits its deadlines, that makes it
      pretty tough to take a vacation.
  
  +slide.light-text.dim(data-background-image="./images/make-the-right-thing-the-easy-thing/bus.webp")
    h2 What is your code’s
      span(style="display: block; font-size: 170%") bus factor?

    aside.notes.
      It’s common to hear developers talk about the “bus factor” — also called the “truck number” or “lottery number” — of a given codebase. It’s intended to point out the fragility of a project: how many people have to get hit by a bus before no one is left that knows how it works?
      #[br]#[br]
      That feels a little too negative and alarmist to me, though. So what about a more positive (and realistic) term for it?

  +slide.light-text.dim(data-background-image="./images/make-the-right-thing-the-easy-thing/vacation.webp")
    h2 What is your code’s
      span.underlined(style="display: block; font-size: 210%; line-height: 0.9") vacation
      span(style="display: block; font-size: 170%") tolerance?

    aside.notes.
      On any team, we need everyone to have the ability to take time off. So instead of talking about the bus factor, talk about how easily any given person can go on vacation. Could two people go on vacation without stalling the rest of the team? Ideally, every team member should be pretty effective even if the entire team took time off.

  +slide
    h2 The problem with
      span(style="display: block; font-size: 170%") #[strong rockstars]:
    ul
      li.fragment They become bottlenecks
      li.fragment They create dependent teams
      li.fragment They build knowledge silos
      li.fragment They eventually leave
    
    aside.notes.
      If the rockstar is carrying most of the weight for a team, that means that work bottlenecks around the rockstar. Typically, teams start to automatically defer to the rockstar, which means there are fewer people taking initiative; instead, they respond to pretty much everything with, “You’d have to check with _________.” And because of that dependency, team members allow the rockstar to become the team’s source of truth — that’s a huge problem, because when the rockstar eventually burns out and quits (or retires, or gets transferred or promoted), all of that knowledge goes with them.

  +slide
    h2(style="font-size: 6.5rem") We need to do
      em(style="display: block; font-size: 220%; line-height: 0.8") better
      | for our teams

  +slide
    h1
      span(style="font-size: 46%") We need to fix the
      em.hugify(style="margin-top: 0.05em; line-height: 0.7") real
      | problem
    aside.notes.
      Yes, it’s not all that glamorous, but if we really want to create teams that run really well, we need to fix the underlying problems that created a need for a rockstar in the first place.

  +slide
    h1
      span(style="font-size: 65%") We need to create a
      em(style="display: block; font-size: 170%") Process

  +slide
    h4 ...wait, what?

  +slide
    h3 What 
      span.underlined slows teams down
      | ?
    ul
      li.fragment Lack of confidence in ability, knowledge, or autonomy
      li.fragment Lack of clarity about the goal of a given project

  +slide
    h3(style="font-size: 180%") A good process creates
      span(style="display: block; margin-top: 0.05em; font-size: 210%")
        em confidence
        span(style="font-size: 118%") &amp; 
          em clarity

  +slide
    h3(style="font-size: 180%") A good process creates
      span(style="display: block; margin-top: 0.05em; font-size: 145%")
        em stronger teams
    ul
      li.fragment No one is a bottleneck
      li.fragment Each dev can make decisions independently
      li.fragment Knowledge is shared and documented
      li.fragment No chaos if devs take vacation, get promoted, or quit

  +slide


  //-

    - Fixing the root problem pays dividends
      - The whole team becomes stronger
      - No one is a bottleneck
      - Knowledge silos disappear
      - Everyone can take a real vacation
    - “If you want to go fast, go alone. If you want to go far, go together.”
    - Compare teams
      - Average
      - Rockstar
      - Lead Developer
    - So... what IS the root problem?
    - Probably some combination of:
      - Lack of confidence
      - Lack of clarity
    - What gives teams confidence?
      - Autonomy
      - Clear processes
      - Shared knowledge
    - What gives teams clarity?
      - Clear, measurable goals
      - Well-defined accountability chain
    - How to create that inside your team
      - Documentation
      - Internal processes
      - Internal training
      - Code reviews
      - Writing tests
      - Style and quality guidelines
    - “I try! My team won’t do it!”
    - The elephant and the rider. (Chip & Dan Heath)
      - We can’t expect people to do things because they’re right
      - We need to appeal to the elephant
    - Make the Right Thing the Easy Thing
      - Education
      - Automation
      - Foundation
    - Education
      - Pair programming
        - Helps us see where context is unclear
      - Lunch and learn
        - Encourage all team members to lead
        - For junior devs, share what they’re learning now
        - For more experienced devs, share what they’re learning now
      - Code reviews
        - Call out good patterns
        - Demonstrate opportunities for refactoring
    - Automation
      - Run Prettier automatically
      - PR-based pipeline
      - Require tests to pass, minimum coverage (on new code at least)
      - Run ESLint to guard against low-quality/high-complexity patterns
      - Require PR reviews before merging
    - Foundation
      - Only add tools when the benefit outweighs the training costs
        - https://twitter.com/chrisbiscardi/status/985005863785000961
        - “Premature optimization can be a violent source of tech debt. If you
          have experience and know it’s the right move, great. Otherwise: keep
          it as simple as possible for as long as possible.” –@chrisbiscardi
      - Create starters and boilerplates w/100% test coverage
        - It’s hard to start from a defecit
        - It’s much easier to maintain a healthy project
        - Psychology (loss aversion? narrative bias?)
      - Build small tools to decrease complexity
        - If everyone has to do it anyways, make it automatic
        - Examples:
          - CLI to configure an NGINX reverse proxy
          - Script toolbox to allow an upgradeable, shareable config for webpack, etc.
    - INVEST IN THE FOUNDATION
      - 1 repeatable task × 4 hours × 15 developers × average $70K salary = $2,625
      - 1 repeatable task × 1 lead dev × 6 hours = CLI tool
      - 1 repeatable task × 1 CLI tool × 5 minutes × 15 developers = >$2K saved
    - At IBM, 3.5 hours saved per developer on IBM Cloud means over $80K saved, which is enough to:
      - Hire a new developer
      - Give the top 10% of performers a $1K bonus
    - This is just ONE TASK
      - These add up in a hurry
    - “But we have deadlines!”
    - Remember: move slow to move fast
      - Don’t be a hero at the expense of long-term efficiency
      - 


    INTRODUCTION
    - What makes working on a team hard?
      - Knowledge silos
      - Inconsistency between projects/teams
      - Lack of documentation
      - Bottlenecks and gatekeepers
      - Confusion about accountability
      - Competing demands
      - Too many stakeholders
    - Are other developers just jerks?
      - Of course not!
      - Usually
    - Then how does this bad stuff happen?
      - We write code based on a mental model
        - Typically, that mental model is complex
        - [Illustration: seeing the Matrix]
      - Everyone builds slightly different mental models
        - [Illustration: two people, same problem, different models]
      - The code we write only represents a fraction of the work that was done
        - [Illustration: iceberg]
      - Other developers don’t have access to our mental models
        - [Illustration: code on stage in front of audience, model behind curtain]
      - This leads to confusion and uncertainty
        - [Illustration: TODO fix the mystery box that makes us money]
      - Uncertainty leads to:
        - Making the original author into a bottleneck
        - Contextual knowledge being siloed in a given dev’s head (or within a team)
        - Unwillingness to modify code — people code around it instead
        - [Illustration: scaffolding around the mystery box]
    - These issues happen in solo projects, too
      - We build a mental context
      - Then we write code
      - Then we forget the mental context
      - And when we come back, we can’t remember why we did things this way
      - [Graphic: find that comic of “What idiot wrote this code?! Oh, it was me.”]
    - How can we fix it?
      - Documentation
      - Code reviews
      - Internal training
      - Writing tests
      - Style and quality guidelines
      - [Illustration: docs, two people, presentation, green checkmarks, white glove]
    - You just said all the worst things!
      - [GIF: nope]
    - This is the problem
      - Many of us associate best practices with extra work
      - Sometimes we have the energy, but usually we don’t
      - If deadlines get tight, the “nice to have” stuff gets cut
      - So even if we try, doing things the right way tends to slip over time
    - Can we fix it?
      - Yes!
      - How?
        - Identify the Right Things
        - Make the Right Thing the Easy Thing
      - Research to reference:
        - Switch (Chip and Dan Heath)
        - Additive vs. Subtractive (Precision Nutrition)
        - How to Get People to Do Stuff (I forget the author’s name)

    WHAT ARE THE RIGHT THINGS?
    - Create consistent code across all teams
      - Automate style corrections
      - Enforce quality rules
      - Require code reviews
      - Enforce minimum test coverage (maybe only for new code at first)
    - Design quality control processes
      - Protect the master branch
      - Enforce (or strongly suggest) a maximum pull request size
    - Remove yourself as a bottleneck
      - Understand that writing tons of code while the rest of the team is 
        blocked or struggling is not making you a hero
      - Comparison graphics
        - Team of 10 average developers
          - Output: 100%
          - Contribution per dev: ~10%
          - Chance of getting paged: ~10%
        - Team of 10 with a “rockstar” developer
          - Output: ~150%
          - “Rockstar” contribution: > 50%
          - Chance of “rockstar” getting paged: > 90%
        - Team of 10 with a lead developer
          - Output: ~200%
          - Contribution per dev: ~10%
          - Chance of getting paged: ~10%
  
  +slide(data-background="./images/make-the-right-thing-the-easy-thing/average-team.png")
  +slide(data-background="./images/make-the-right-thing-the-easy-thing/average-team-details.png")
  +slide(data-background="./images/make-the-right-thing-the-easy-thing/rockstar.png")
  +slide(data-background="./images/make-the-right-thing-the-easy-thing/rockstar-details.png")
  +slide(data-background="./images/make-the-right-thing-the-easy-thing/lead-dev.png")
  +slide(data-background="./images/make-the-right-thing-the-easy-thing/lead-dev-details.png")

  //-
    - Raise your Bus Factor (who invented this concept?)

    MAKE THE RIGHT THING THE EASY THING
    - Socialize knowledge across teams
      - Hold regular team code reviews (focus on good and bad code)
      - Do lunch-and-learn sessions, hackathons
      - Encourage all team members to lead education sessions
    - Automate whenever possible
      - Remove the need for a “code cop”
      - Run Prettier in CI and auto-commit the formatted code
      - Run ESLint in CI and fail the build for errors
        - Only use rules that check code quality
    - Focus on the developer experience
      - Choose tools that serve multiple goals
        - Good for users (e.g. great performance)
        - Good for developers (e.g. great docs, ecosystem, community)
    - Build a strong technical foundation
      - Develop internal tooling for common tasks
      - Create boilerplates and examples with 100% test coverage

    HOW TO DRIVE ADOPTION
    - Adoption starts at the top AND the bottom
    - Put it in executive terms
      - Execs don’t care about the details
      - What are they on the hook to deliver?
      - Frame the changes in terms of the effect on executive deliverables
    - Define metrics for managers
      - We manage what is measured
      - Measure the right things
        - Technical debt
        - Quality trends
        - Changes over time, not absolute measures of the codebase
          - A team with a big legacy app may only show 20% code coverage, but may
            have covered 10K+ lines of code in the last few months
          - A team may have 85% coverage, but that’s down from 100% six weeks ago
    - Reward the right behaviors
      - Negative reinforcement doesn’t work very well (research?)
      - Publicly reward team members who follow best practices
    - Lead from the front
      - The LAST person who gets to cut corners is you
  
  //-
    Don't be a 10× developer
    Help everyone around you become a 2× developer

  //- Q&A
  +slide
    h1.no-margin Thanks!
    img(
      src="./images/work-life-balance/jason-lengstorf.jpg"
      alt="Jason Lengstorf"
      style="border-radius: 50%; width: 240px; min-width: 0; margin-bottom: 0;"
    )
    p(style="margin-top: 0.25rem;")= config.author.name
      br
      small
        | Follow me on Twitter: 
        a(href= `https://twitter.com/${config.author.twitter}`)= `@${config.author.twitter}`

  //- Resources
  +slide.u--align-left.resourcetext
    h4 Resources
    ol
      li
        a(href="https://youtu.be/zqdCM8zR6Mc").
          “But Testing Sucks!” — How to Build a Testing- and Quality-Driven Culture

block styles
  link(
    rel="stylesheet"
    href="//maxcdn.bootstrapcdn.com/font-awesome/4.3.0/css/font-awesome.min.css"
  )
  script.
    (function(d) {
      var config = {
        kitId: 'fnr1orp',
        scriptTimeout: 3000,
        async: true
      },
      h=d.documentElement,t=setTimeout(function(){h.className=h.className.replace(/\bwf-loading\b/g,"")+" wf-inactive";},config.scriptTimeout),tk=d.createElement("script"),f=false,s=d.getElementsByTagName("script")[0],a;h.className+=" wf-loading";tk.src='https://use.typekit.net/'+config.kitId+'.js';tk.async=true;tk.onload=tk.onreadystatechange=function(){a=this.readyState;if(f||a&&a!="complete"&&a!="loaded")return;f=true;clearTimeout(t);try{Typekit.load(config)}catch(e){}};s.parentNode.insertBefore(tk,s)
    })(document);

block extras
  -
    const relatedAccounts = [config.author.twitter];
    
    if (config.conference.twitter) {
      relatedAccounts.push(config.conference.twitter);
    }

    // See https://dev.twitter.com/web/tweet-button/web-intent for parameters.
    const tweetObj = {
      text: `${config.title} by @${config.author.twitter}`,
      hashtags: config.conference.hashtag || '',
      related: relatedAccounts.join(','),
      url: config.slides.link,
    };

    // 
    const e = encodeURIComponent;
    const args = Object.keys(tweetObj).map(key => `${key}=${e(tweetObj[key])}`);
    const tweetUrl = `https://twitter.com/intent/tweet?${args.join('&')}`;
  -
  .hashtag
    p
      | Tweet: 
      a(
        href=tweetUrl
        target="_blank"
      ) @#{config.author.twitter} 
        | #{config.conference.hashtag ? `#${config.conference.hashtag}` : ''}
  footer
    ul.inline
      li
        | “#{config.title}” by 
        a(href= config.author.link)= config.author.name
        |  (slides: 
        a(href= config.slides.link)= config.slides.link.replace('https://', '')
        | )
      li
        a(href="https://twitter.com/"+config.author.twitter).
          @#{config.author.twitter}
      li
        a(href="https://github.com/"+config.author.github).
          github.com/#{config.author.github}
