//- Use the presentation layout so we can keep this clean
extends layouts/presentation

block append config
  -
    config.theme = 'lengstorf';
    config.title = 'WordPress Deployment';
    config.description = 'How to Manage Multiple WordPress Installs in 30 Minutes or Less';
    config.slidesLink = 'https://code.lengstorf.com/presentation/wordpress-deployment-for-professionals/slides/';

    config.author = {
      name: 'Jason Lengstorf',
      email: 'jason@lengstorf.com',
      link: 'https://code.lengstorf.com/',
      twitter: 'jlengstorf',
      github: 'jlengstorf',
    };
    
    config.slides = {
      link: 'https://git.io/vy1GU',
    };

    config.conference = {
      hashtag: 'wcatl',
      twitter: false,
    };
  -

//- Add your slides here. See templates/includes/_mixins.pug for information 
//- on how `+slide` works.
block slides
  +slide
    h1= config.title
    h3= config.description
    
    p by 
      a(href= config.author.link)= config.author.name
      br
      small
        a(href= `https://twitter.com/${config.author.twitter}`)= `@${config.author.twitter}`
        |  | 
        a(href= `mailto:${config.author.email}`)= config.author.email
    
    p
      small Slides: #[a(href= config.slides.link)= config.slides.link.replace('https://', '')]

  //- Front-matter stuff
  +slide.u--align-left.u--text-light.u--text-shadow(data-background="url(./images/bear-background@2x.jpg)")
    h2 Who I Am
    ul
      li.hide-me 
      li.hide-me 
      li.hide-me 
      li.hide-me 
      li.hide-me 
      li.hide-me 

    aside.notes.
      This joke is so terrible. You should be ashamed of yourself.

  +slide.u--align-left.u--text-light.u--text-shadow(data-background="url(./images/jason-lengstorf-slide-bg@2x.jpg)")
    h2 Who I Am
    ul.full-width
      li.fragment Building web shit since 2003
      li.fragment #[em Huge] process &amp; efficiency nerd
      li.fragment Work-life balance advocate / consultant
      li.fragment Senior developer at IBM
      li.fragment Author of 3 books on development stuff
      li.fragment World champion purveyor of bear hugs

  //- Pt. I — WordPress development is complex
  +slide
    h2 Straw Poll
    img.fragment(
      src="./images/deploy-wordpress/live-dangerously.gif"
      alt="Austin Powers"
    )

    aside.notes
      ul
        li Who here works at an agency or large company? And who’s a freelancer?
        li Who here develops locally before deploying? On a development server? In production?

  +slide
    h3 WordPress Workflow
    ol
      li.fragment Install a local copy of WordPress
      li.fragment Build the site
      li.fragment Load content and media
      li.fragment Move the local site to a staging server for review
      li.fragment Make changes on local
      li.fragment Move local changes to staging
      li.fragment After approval, move staging to production

    aside.notes.
      This is a recommended workflow. Working locally is efficient and allows teams to 
      work on the same site simultaneously. A staging server allows clients to review
      changes before they go live. While you #[em can] get away without them, it’s 
      generally a good idea to include these steps in your workflow.

  +slide
    h2 How do you #[strong move] a WordPress install?
    aside.notes.
      Continuous deployment/integration tool? Git? FTP and manual MySQL migration?

  +slide
    img(
      src="./images/deploy-wordpress/wp-migration.png"
    )

    aside.notes.
      This is how the WordPress docs recommend migrating a site. This is a 
      #[em lot of steps]. And they're all manual. Which is a problem, because...
  
  +slide
    h3
      | Every manual step#[br]in your dev process increases the risk of 
      strong(style="display: block; font-size: 275%") failure
    p
      small.fragment (Wow, what a great thing to tweet!)
        br
        strong.fragment ##{config.conference.hashtag}

  +slide
    h3 Moving WordPress sites is
      br
      span(
        style="font-size: 104%; opacity: 1"
      ) complicated &amp; repetitive
      br
      span(
        style="font-size: 104%; opacity: 0.9"
      ) complicated &amp; repetitive
      br
      span(
        style="font-size: 104%; opacity: 0.8"
      ) complicated &amp; repetitive
      br
      span(
        style="font-size: 104%; opacity: 0.7"
      ) complicated &amp; repetitive
      br
      span(
        style="font-size: 104%; opacity: 0.6"
      ) complicated &amp; repetitive
      br
      span(
        style="font-size: 104%; opacity: 0.5"
      ) complicated &amp; repetitive
      br
      span(
        style="font-size: 104%; opacity: 0.4"
      ) complicated &amp; repetitive
      br
      span(
        style="font-size: 104%; opacity: 0.3"
      ) complicated &amp; repetitive
      br
      span(
        style="font-size: 104%; opacity: 0.2"
      ) complicated &amp; repetitive
      br
      span(
        style="font-size: 104%; opacity: 0.1"
      ) complicated &amp; repetitive
      br
      span(
        style="font-size: 104%; opacity: 0.05"
      ) complicated &amp; repetitive
      br
      span(
        style="font-size: 104%; opacity: 0.025"
      ) complicated &amp; repetitive
      br
      span(
        style="font-size: 104%; opacity: 0.0125"
      ) complicated &amp; repetitive

  +slide
    h3 People are #[strong really bad] at complicated &amp; repetitive
    img(
      src="./images/deploy-wordpress/lucy-candy-factory-o.gif"
      alt="I Love Lucy"
    )

    aside.notes.
      In fact, people tend to get worse over time at complicated &amp; repetitive tasks.
      We settle in, get bored, and start taking shortcuts.
  
  +slide
    h3 However, there's a
      strong.hugify bigger risk
      | with complex processes

  +slide
    h2 
      span.hugify.alright-calm-down-a-little Nobody #[em Follows] Them

  +slide
    h2 And you end up coding in production.
  
  +slide.u--text-light.u--text-shadow(
    data-background="url(./images/deploy-wordpress/coding-in-production.gif)"
  )
    h3 #codinginproduction

  +slide
    h3 I developed WordPress sites 
      strong.hugify the hard way
      |  for way, way, #[em way] too long

  +slide
    h2 Then I accidentally the #[strong whole server]

    aside.notes.
      I was trying to develop a plugin that did something with images, and I 
      wrote a cleanup function that was #[em really good] at cleaning up.

  +slide
    h2 ...and I was hosting 8 client sites on it...

    aside.notes.
      At the time, I was using a shared hosting plan, and I’d just create a new folder
      and add a new site in cPanel and create a new database and let ’er rip.

  +slide
    h3 ...and I didn't have backups

  +slide
    h2 It was time to 
      em.hugify evolve
    img(
      src="./images/deploy-wordpress/evolve.gif"
      alt="Pokemon"
    )

    aside.notes.
      At this point I realized that I needed to start handling my development process
      like a professional if I expected anyone to take me seriously as a developer. You
      can bounce back from a catastrophe like this once — GitLab is a great example of 
      a company facing the worst and handling it like pros — but your clients aren’t
      going to stick around if this becomes a regular thing.

  +slide
    h3 I set out to automate #[em.hugify everything]

  +slide
    h3 Robots are #[strong really good] at complicated &amp; repetitive
    img(
      src="./images/deploy-wordpress/robots.gif"
      alt="I Love Lucy"
    )
  
  +slide
    h3
      span.hugify(style="font-size: 270%") The Goal
      em Automatically
      |  handle:
    ol
      li.fragment Moving theme and plugin files between servers
      li.fragment Copying databases between servers
      li.fragment Doing a WordPress-safe find-and-replace for URLs
      li.fragment Moving uploaded media between servers
      li.fragment Migrating plugin activation status
      li.fragment Supports local development

  +slide
    h3 Round 1:
      span.hugify #[em Managed] WordPress
    small WPEngine, Flywheel Sites, MediaTemple, etc.

  +slide
    h3 Managed WordPress hosting offers:
    ul(style="width: 85%")
      li.fragment Git Deployment (sometimes)
      li.fragment Automated Backups
      li.fragment Update Management and Security Audits
      li.fragment Staging Installs w/One-Click Migration
    
    aside.notes.
      The last time I checked, only WPEngine had a Git-based deployment. Automated 
      backups usually cost extra, but they're #[em really] nice to have if something
      goes wrong. Vulnerability alerts and automatic core updates are also pretty
      fantastic. Plus — bonus — we now have painless staging sites. How does this
      match up with our wishlist?
  
  +slide
    h3 Managed WordPress:
    p
      small (Only on staging and production servers!)
    ol
      li.fragment Moving theme and plugin files between servers
      li.fragment Copying databases between servers
      li.fragment Doing a WordPress-safe find-and-replace for URLs
      li.fragment Moving uploaded media between servers
      li.fragment Migrating plugin activation status
      li.fragment(style="text-decoration: line-through;") Supports local development
    
    
    aside.notes.
      The benefits are only there if you do everything within the managed WordPress
      ecosystem, too. You can’t have a staging server in one place and production in
      another. That’s not typically a problem, but vendor lock-in is always worth 
      mentioning as you consider options.

  +slide
    h3 ...and they're #[strong 'spensive]
    img(
      src="./images/deploy-wordpress/spensive.gif"
      alt="'spensive"
    )

    aside.notes.
      I tried to sell my clients on WPEngine, but many of them balked at $29/month. Plus,
      that cut into my ability to charge for ongoing maintenance.

  +slide
    h3 How do we solve#[br]the problem of#[br]#[em local development]?

    aside.notes.
      I have seen some options for developing locally while using managed WordPress.
      Flywheel is a good example of this. I haven’t tried it, but it may be worth
      checking out as an alternative to what I’m talking about here today. Again, though:
      this means vendor lock-in.

  +slide
    h3 Round 2:
      em.hugify Trellis

  +slide
    h3 Trellis offers:
    ul(style="width: 85%")
      li.fragment Open source (free as in beer)
      li.fragment 5-minute local setup
      li.fragment One-command deployment to staging and production
      li.fragment Zero-effort SSL certificates
      li.fragment Git-based workflow
    
    aside.notes.
      Trellis is a project from the Roots team, which is an open-source effort to 
      make WordPress easier to work with. It’s an Ansible-based deployment 
      configuration for WordPress that makes it extremely simple to manage your
      theme, plugins, and various settings in a way that makes team development a 
      breeze. The local environment is set up through Docker, and the staging and
      production versions run on a VPS 

  +slide
    h2 What is Trellis?
    ul
      li.fragment Ansible-based deployment playbook for WordPress
      li.fragment Creates a Docker container locally
      li.fragment Configures a VPS (e.g. Digital Ocean) for staging and production
      li.fragment Creates free SSL certificates through Let’s Encrypt
      li.fragment Makes all configuration shareable
        ul
          li.fragment This means developing on a team is #[em really] easy

  +slide
    h3 Five steps to (local) glory:
    ol
      li.fragment Install the dependencies
      li.fragment Clone Trellis from GitHub
      li.fragment Clone Bedrock from GitHub
      li.fragment Configure Trellis
      li.fragment Start the local site with one command

  +slide
    h3 "Configure" sounds #[strong scary]

  +slide
    h3 I promise it's not too bad
    img(
      src="./images/deploy-wordpress/trellis-config-local.png"
    )

  +slide
    h3 One more change...
    img(
      src="./images/deploy-wordpress/trellis-config-local-pt2.png"
    )

  +slide
    h3 Start the party
    pre
      code.bash.
        vagrant up

  +slide
    h1
      em BAM!
    img(
      src="./images/deploy-wordpress/local-dev-offline.png"
    )

  +slide
    h3 What about #[em going live]?
  
  +slide
    h3 Seven steps to (live) glory:
    ol
      li.fragment Create a virtual private server (VPS)
      li.fragment Point your domain to the VPS
      li.fragment Configure Trellis
      li.fragment Encrypt sensitive stuff
      li.fragment Put your site on GitHub
      li.fragment Provision the server with one command
      li.fragment Go live with one command

  +slide
    h1 What the eff is a #[em VPS]?
    ul(style="width: 90%")
      li.fragment Private server that you have full control over
      li.fragment Allows you to customize everything
        ul
          li.fragment (but you don't have to)

  +slide
    h3 How to #[em set up your VPS]
    p
      small (I'm using DigitalOcean, but you can use any VPS you prefer.)
    ul
      li.fragment #[strong Distribution:]  Ubuntu 16.04.2 x64
      li.fragment #[strong Size:] $5/month
      li.fragment #[strong Region:] Closest to your audience
      li.fragment #[strong Options:] Ideally, choose backups
      li.fragment #[strong IMPORTANT:] Add your SSH key
    
    aside.notes.
      Make sure to add your SSH key. If you’ve never done this, 
      I have an article to walk you through it with links to
      extra resources.

  +slide
    h2 Point #[em your domain] to the VPS
    p Check with your domain company for instructions.
      br
      small (Create an A record pointing to your VPS's IP address)

    aside.notes.
      This is required so someone visiting your domain (e.g. mysite.com)
      will be directed to your new server.

  +slide
    h3 Configure #[em Trellis]
    img(
      src="./images/deploy-wordpress/trellis-config-live.png"
      alt="Trellis config"
    )

  +slide
    h3 Configure #[em Trellis]
    img(
      src="./images/deploy-wordpress/trellis-config-live-pt2.png"
      alt="Trellis config"
    )
  
  +slide
    h1 #[em IMPORTANT]
    h3 Encrypt passwords &amp; salts #[strong before] you share them or commit them to GitHub
    p
      a(href="https://roots.io/trellis/docs/vault/") https://roots.io/trellis/docs/vault/

  +slide
    h3 Configure #[em Trellis]
    img(
      src="./images/deploy-wordpress/trellis-config-live-pt3.png"
      alt="Trellis config"
    )

  +slide
    h3 Put your site #[em on GitHub]
    img(
      src="./images/deploy-wordpress/github.png"
      alt="GitHub"
    )

    aside.notes.
      Don't be intimidated by Git. It will save you SO much time
      as your business grows.

  +slide
    h3 #[em Provision] the VPS
    pre
      code.js.
        ansible-playbook server.yml -e env=production
    p
      small Make sure you're in the /trellis directory to run this.

    aside.notes.
      This takes a bit. Allow 5–10 minutes for the script to run.

  +slide
    h3 Go #[em live]
    pre
      code.js.
        ./deploy.sh production roots.code.lengstorf.com

  +slide
    h3 Check the #[em live site] in a browser
    img(
      src="./images/deploy-wordpress/trellis-live-site.jpg"
      alt="Trellis site live"
    )

  +slide
    h2
      strong.hugify Wait
      | Where's the database?

  +slide
    h3 Add the #[em WP Sync DB] plugin

  +slide
    h3 Configure the live site to #[em accept push] requests
    img(
      src="./images/deploy-wordpress/wp-sync-db-live.jpg"
      alt="WP Sync DB"
    )

  +slide
    h3 Configure the local site to #[em push] to the live site
    img(
      src="./images/deploy-wordpress/wp-sync-db-local.jpg"
      alt="WP Sync DB"
    )

  +slide
    h3 #[em Start the push] on the local site
    img(
      src="./images/deploy-wordpress/wp-sync-db-running.jpg"
      alt="WP Sync DB"
    )

  +slide
    h3 What just happened?
    img(
      src="./images/deploy-wordpress/yayyayyay.gif"
      alt="so excite"
      style="margin: 0; max-width: 60%"
    )

  +slide
    h3 What just happened?
    ol
      li.fragment We configured a local development site
      li.fragment We configured a live site
      li.fragment We pushed the local site's changes to the live site
      li.fragment We synced the database in one click
  
  +slide
    h3 After it's set up, further syncs take #[em seconds]
  
  +slide
    h3 This will #[em save you days] as you continue building sites

  +slide
    h3 Welcome to #[em elite-level efficiency]
    img(
      src="./images/deploy-wordpress/efficiency.gif"
      alt="efficiency"
    )

  +slide
    h3 I have a #[em video walkthrough] of the whole process at
    p 
      a(href="https://git.io/vyd2O") git.io/vyd2O

  +slide
    h1 Questions?
    p= config.author.name
      br
      small
        a(href= `https://twitter.com/${config.author.twitter}`)= `@${config.author.twitter}`
        |  | 
        a(href= `mailto:${config.author.email}`)= config.author.email

  //- Resources
  +slide.resourcetext
    h3 Resources
    ol
      li
        a(
          href="https://git.io/vyd2O"
        ) Video + Written Tutorial for Trellis
      li
        a(
          href="https://m.do.co/c/9d561578e13a"
        ) DigitalOcean ($10 credit)
      li
        a(
          href="https://roots.io/trellis/"
        ) Trellis
      li
        a(
          href="https://deliciousbrains.com/wp-migrate-db-pro/"
        ) WP Migrate DB Pro


block styles
  link(
    rel="stylesheet"
    href="//maxcdn.bootstrapcdn.com/font-awesome/4.3.0/css/font-awesome.min.css"
  )
  script.
    (function(d) {
      var config = {
        kitId: 'fnr1orp',
        scriptTimeout: 3000,
        async: true
      },
      h=d.documentElement,t=setTimeout(function(){h.className=h.className.replace(/\bwf-loading\b/g,"")+" wf-inactive";},config.scriptTimeout),tk=d.createElement("script"),f=false,s=d.getElementsByTagName("script")[0],a;h.className+=" wf-loading";tk.src='https://use.typekit.net/'+config.kitId+'.js';tk.async=true;tk.onload=tk.onreadystatechange=function(){a=this.readyState;if(f||a&&a!="complete"&&a!="loaded")return;f=true;clearTimeout(t);try{Typekit.load(config)}catch(e){}};s.parentNode.insertBefore(tk,s)
    })(document);

block extras
  -
    const relatedAccounts = [config.author.twitter];
    
    if (config.conference.twitter) {
      relatedAccounts.push(config.conference.twitter);
    }

    // See https://dev.twitter.com/web/tweet-button/web-intent for parameters.
    const tweetObj = {
      text: `${config.title} by @${config.author.twitter}`,
      hashtags: config.conference.hashtag || '',
      related: relatedAccounts.join(','),
      url: config.slidesLink,
    };

    // 
    const e = encodeURIComponent;
    const args = Object.keys(tweetObj).map(key => `${key}=${e(tweetObj[key])}`);
    const tweetUrl = `https://twitter.com/intent/tweet?${args.join('&')}`;
  -
  .hashtag
    p
      | Tweet: 
      a(
        href=tweetUrl
        target="_blank"
      ) @#{config.author.twitter} 
        | #{config.conference.hashtag ? `#${config.conference.hashtag}` : ''}
  footer
    ul.inline
      li
        | “#{config.title}” by 
        a(href= config.author.link)= config.author.name
        |  (slides: 
        a(href= config.slides.link)= config.slides.link.replace('https://', '')
        | )
      li
        a(href="https://twitter.com/"+config.author.twitter).
          @#{config.author.twitter}
      li
        a(href="https://github.com/"+config.author.github).
          github.com/#{config.author.github}
