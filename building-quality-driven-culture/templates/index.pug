//- Use the presentation layout so we can keep this clean
extends layouts/presentation

block append config
  -
    config.theme = 'lengstorf';
    config.title = '“But Testing Sucks!”';
    config.description = 'How to Build Testing- and Quality-Driven Culture';

    config.author = {
      name: 'Jason Lengstorf',
      email: 'jason@lengstorf.com',
      link: 'https://code.lengstorf.com/',
      twitter: 'jlengstorf',
      github: 'jlengstorf',
    };
    
    config.slides = {
      link: 'https://git.io/vA0BN',
    };

    config.conference = {
      hashtag: 'assertJS',
      twitter: 'assertjs',
    };
  -

//- Add your slides here. See templates/includes/_mixins.pug for information 
//- on how `+slide` works.
block slides
  +slide
    h1(style="width: 110%; margin-left: -5%; font-size: 75px;")= config.title
    h3= config.description
    
    p by 
      a(href= config.author.link)= config.author.name
      br
      small
        a(href= `https://twitter.com/${config.author.twitter}`)= `@${config.author.twitter}`
        | &nbsp; · &nbsp;
        a(href= `mailto:${config.author.email}`)= config.author.email
    
    p
      small Slides: #[a(href= config.slides.link)= config.slides.link.replace('https://', '')]

  //- THE PROBLEM

  +slide
    h1 We all #[em know] testing is important

    aside.notes.
      Do a straw poll: how many people currently have well-tested code
      throughout their whole organization?
  
  +slide
    h3 ...so why isn’t it happening?
  
  +slide
    h3 There are plenty of “reasons” #[strong not] to test:
    ul
      li.fragment “We don’t have time to write tests!”
      li.fragment “Where do we even start with testing?”
      li.fragment “Testing slows us down!”
      li.fragment “Tests are too hard to maintain!”
      li.fragment “Junior devs don’t know how to write tests...”
      li.fragment “...and we don’t have bandwidth to train them.”

  +slide
    img(
      style="height: 400px;"
      src="../images/building-quality-driven-culture/but-its-hard.gif"
      alt="But it’s hard — Scott Pilgrim vs. the World."
    )

  //- WHY IS THIS A PROBLEM?

  +slide
    h1 Hard or not, we #[em need] to write tests
  
  +slide
    h3 If our code isn’t tested, we’re #[strong just guessing]
  
  +slide
    h3 Even smaller codebases have lots of #[strong edge cases]
  
  +slide
    h3 Manual quality assurance #[strong doesn’t] catch everything

    aside.notes.
      And that’s assuming manual QA happens in the first place.
  
  //- WHAT’S THE IDEAL?

  +slide
    h1 Testing #[em Doesn’t] Have to Be Hard

  +slide
    h3 A #[em battle-tested] strategy
    ul
      li.fragment Code changes must be sent as pull requests
      li.fragment A build pipeline runs tests automatically
      li.fragment The new code must meet testing requirements
      li.fragment The new code must meet quality guidelines
      li.fragment Change must be peer reviewed and approved

  +slide
    h3 What should the #[em testing] requirements be?
    ul
      li.fragment The app builds successfully
      li.fragment All tests pass
      li.fragment Coverage thresholds must be met for new code
      li.fragment Coverage thresholds for the whole repo (maybe)

  +slide
    h3 What should the #[em quality] guidelines be?
    ul
      li.fragment Limit cyclomatic and cognitive complexity
      li.fragment Avoid known problematic patterns
      li.fragment Check for security vulnerabilities
      li.fragment Eliminate duplicate code
  
  +slide
    h4 We should #[strong not] fail a pull request on style
    p.fragment Just use Prettier and forget about it.

  +slide
    h3 Test and quality checks can be #[em automated]:
    ul
      li.fragment Linters and IDE plugins to help as code is written
      li.fragment Husky and Git hooks to check changes pre-push
      li.fragment TravisCI and Jenkins to build and test PRs
      li.fragment SonarCloud, Code Climate, Codacy for quality checks
      li.fragment Prettier to auto-fix code style

  +slide
    h1 Why This Strategy #[em Works]
  
  +slide
    h3 Pull requests create a #[em control flow]
    ul
      li.fragment No force pushing
      li.fragment Creates a place for automated tests to run
      li.fragment Requires team participation

  +slide
    h3 Automated tests catch more edge cases #[em before] regressions happen
  
  +slide
    h3 Quality checks #[em minimize] technical debt and maintenance overhead

  +slide
    h3 Automating enforcement removes the need for a #[strong human code cop]

  +slide
    h3 Peer reviews create opportunities to #[em learn]#[br]&amp; #[em share] knowledge

  +slide
    h3 Testable code is #[em better] code
    ul
      li.fragment Cleaner separation of different functionality
      li.fragment Fewer side effects (because mocking sucks)
      li.fragment Better APIs because edge cases are tested for

  //- HOW DO WE GET THERE?

  +slide
    h3 Okay, but...
  
  +slide
    h1 How Do We #[em Get There]?

  +slide
    h2(style="width: 110%; margin-left: -5%;").
      Make the #[em Right] Thing the #[em Easy] Thing

  +slide
    h4 #[em Integrate] checks into your workflow
    img.no-border.no-margin(
      style="max-height: 400px; box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);"
      src="../images/building-quality-driven-culture/code-climate-github-integration.jpg"
      alt="Code Climate GitHub integration."
    )
    p.no-margin
      small Source: #[a(href="https://codeclimate.com/product/") Code Climate]

  +slide
    h4 Use built-in #[em coaching] to improve quality
    img.no-border.no-margin(
      style="max-height: 400px"
      src="../images/building-quality-driven-culture/codacy-issue-explanation.png"
      alt="Codacy issue explanation."
    )
    p.no-margin
      small Source: #[a(href="https://www.codacy.com/product") Codacy]

  +slide
    h2 Make the learning curve as #[em shallow] as possible

  +slide
    h4 Using 3 packages for testing is #[strong confusing]
    img.no-border.no-margin(
      src="../images/building-quality-driven-culture/test-mocha-chai-sinon.png"
      alt="Testing with Mocha + Chai + Sinon."
    )

  +slide
    h4 A unified API makes testing #[em approachable]
    img.no-border.no-margin(
      src="../images/building-quality-driven-culture/test-jest.png"
      alt="Testing with Jest."
    )
  
  +slide
    h3 Starting from 0% is #[strong hard]
  
  +slide
    h3 Keeping tested code tested is significantly #[em less hard]

  +slide
    h3 Internal #[em training] is key
    ul
      li.fragment Hackathons to add tests to older code
      li.fragment Hands-on workshops to teach testing techniques
      li.fragment Cross-team code reviews to share knowledge
      li.fragment Compile best practices into internal docs
      li.fragment Coach the team on writing more testable code
      li.fragment Hire external trainers if necessary

  +slide
    h3 Don’t forget: #[em executives] also need training
    ul
      li.fragment An untested product is fragile
      li.fragment Fragile products break in unpredictable ways
      li.fragment Unpredictability causes delays
      li.fragment Delays cost money and frustrate customers

  +slide
    h2 Make code quality a point of #[em pride]

  +slide
    h4.no-margin #[em Visually] represent code health in public
    img.no-border.no-margin(
      src="../images/building-quality-driven-culture/sonarqube-dashboard.png"
      alt="SonarQube dashboard."
    )
    p.no-margin
      small Source: #[a(href="https://www.sonarqube.org/features/centralization/") SonarQube]
  
  +slide
    h4 Measure code health over time for teams
    img.no-border.no-margin(
      style="max-height: 400px"
      src="../images/building-quality-driven-culture/code-quality-over-time.png"
      alt="Code quality over time on SonarQube."
    )
    p.no-margin
      small Source: #[a(href="https://www.sonarqube.org/features/centralization/") SonarQube]

  +slide
    h2(style="width: 110%; margin-left: -5%;") Make testing a #[em.hugify.alright-calm-down-a-little deliverable] not a “nice to have”
  
  +slide
    h3(style="width: 110%; margin-left: -5%;") New features #[strong without tests] are not safe to launch

  //- OVERCOMING RESISTANT TEAMS

  +slide
    h1 What if people #[strong fight] testing?

  +slide
    h2 Change is #[strong hard]:
    ul
      li.fragment Old habits are hard to break
      li.fragment New requirements cause anxiety

  +slide
    h3 Replace old habits with #[em better] ones

    aside.notes.
      It’s extremely difficult to remove a bad habit without providing an
      alternative. This goes back to what we talked about earlier — Make the
      Right Thing the Easy Thing — we need to provide a happy path for
      developers that saves time, effort, hassle, etc..
  
  +slide
    h3 Try to #[em understand] where resistance is coming from

    aside.notes.
      For a developer who already feels like they don’t have enough time,
      additional requirements are going to feel like an attack. If the
      developer is unfamiliar with testing, they may be worried about the
      time requirements for learning to write tests. In many cases, the simple
      fact that things are changing in any way will trigger resistance.

  +slide
    h3 Focus on the #[em bright spots]

    aside.notes.
      Teams who embrace testing culture should be nurtured and held up as
      great examples to the rest of the company. Don’t ignore the good teams
      when trying to deal with troublesome teams.

  +slide
    h3 Reward the #[em right behavior]
    ul
      li.fragment Use testing and quality as a metric during reviews
      li.fragment Publicly recognize team members who improve code

  +slide
    h3 If that #[strong doesn’t] work...

  +slide
    h3 #[em Reorganize] resistant teams

    aside.notes.
      People tend to mirror the people they spend the most time with. If a
      whole team is resisting change, sometimes all it takes is shuffling
      those developers to new teams that aren’t resisting; the social norms
      will change, and that 

  +slide
    h3 Measure #[em management] on their team’s code quality
    
    aside.notes.
      Teams deliver what they’re measured by; tie manager incentives to quality
      and watch it soar!
  
  +slide
    h3 A word of #[strong caution]:
    p Don’t add requirements without adjusting expectations. Deadlines will need to shift at first.

  +slide
    h2 #[em Stop] rewarding bad behavior
  
  +slide
    h3 Teams shipping features #[strong.hugify without tests] missed their deadline
  
  +slide
    h3 This is #[strong not okay]:
    h4 “We just need to get something out there. We’ll add tests later.”

  +slide
    h2 Be #[em reasonable]
    
    aside.notes.
      Getting started takes time. Don’t expect 0–💯 in a sprint or two

  +slide
    h3 Start #[em plugging] leaks first

    aside.notes.
      On codebases with really low coverage, start by simply requiring that
      all new code has tests and passes quality gates.

  +slide
    h3 Create a #[em ramp-up] period

    aside.notes.
      Refactoring large codebases takes time. Create a phased approach to allow
      plenty of time for teams to get it done. For example, maybe the target is
      to cover 15% of the project per quarter. In some projects this will be
      laughably easy; in others it’ll be a serious struggle.
  
  +slide
    h2 Go #[em slow] to go #[em fast]

  +slide
    h3 Improving #[em foundational] quality will help to:
    ul
      li.fragment Increase the reliability of code
      li.fragment Decrease the time to find and fix bugs
      li.fragment Speed up delivery times for new features
      li.fragment Eliminate existing technical debt...
      li.fragment ...and help prevent new debt from being created
      li.fragment Lower the cost of maintenance

  +slide
    h2
      em.hugify(style="font-size: 320%;") Recap
      | With Action Steps
  
  +slide
    h3 To create #[em quality-driven] culture in your company:
    ol
      li.fragment Make the Right Thing the Easy Thing
      li.fragment Provide support and ramp-up time for developers
      li.fragment Convince management to make time for quality
      li.fragment Reward the desired behavior...
      li.fragment ...and stop rewarding bad behavior
      li.fragment Automate as much of the process as possible
      li.fragment Take pride in shipping #[em quality], not just shipping
  
  +slide
    img.no-margin(
      style="height: 400px"
      src="../images/building-quality-driven-culture/dontshipshit.png"
      alt="Don’t ship shit."
    )
    p.no-margin
      small Credit: #[a(href="http://blog.vanessabrooks.com/2014/11/dont-ship-shit-and-other-things-learned.html") Vanessa Brooks]

  +slide
    h2 Testing is a #[em(style="display: block; font-size: 120%;") supercharger] for companies
  
  +slide
    h3
      | It’s #[em slow] and #[em difficult] to get the mindset in place...
      br
      span.fragment but then it’s #[em unstoppable]

  //- Q&A
  +slide
    h2 Thanks!
    img(
      src="./images/work-life-balance/jason-lengstorf.jpg"
      alt="Jason Lengstorf"
      style="border-radius: 50%; width: 240px; min-width: 0; margin-bottom: 0;"
    )
    p(style="margin-top: 0.25rem;")= config.author.name
      br
      small
        a(href= `https://twitter.com/${config.author.twitter}`)= `@${config.author.twitter}`
        | &nbsp; · &nbsp;
        a(href= `mailto:${config.author.email}`)= config.author.email

  //- Resources
    +slide.u--align-left.resourcetext
    h4 Resources
    ol
      li
        a(href="http://example.org").
          Article Title


block styles
  link(
    rel="stylesheet"
    href="//maxcdn.bootstrapcdn.com/font-awesome/4.3.0/css/font-awesome.min.css"
  )
  script.
    (function(d) {
      var config = {
        kitId: 'fnr1orp',
        scriptTimeout: 3000,
        async: true
      },
      h=d.documentElement,t=setTimeout(function(){h.className=h.className.replace(/\bwf-loading\b/g,"")+" wf-inactive";},config.scriptTimeout),tk=d.createElement("script"),f=false,s=d.getElementsByTagName("script")[0],a;h.className+=" wf-loading";tk.src='https://use.typekit.net/'+config.kitId+'.js';tk.async=true;tk.onload=tk.onreadystatechange=function(){a=this.readyState;if(f||a&&a!="complete"&&a!="loaded")return;f=true;clearTimeout(t);try{Typekit.load(config)}catch(e){}};s.parentNode.insertBefore(tk,s)
    })(document);

block extras
  -
    const relatedAccounts = [config.author.twitter];
    
    if (config.conference.twitter) {
      relatedAccounts.push(config.conference.twitter);
    }

    // See https://dev.twitter.com/web/tweet-button/web-intent for parameters.
    const tweetObj = {
      text: `${config.title} by @${config.author.twitter}`,
      hashtags: config.conference.hashtag || '',
      related: relatedAccounts.join(','),
      url: config.slides.link,
    };

    // 
    const e = encodeURIComponent;
    const args = Object.keys(tweetObj).map(key => `${key}=${e(tweetObj[key])}`);
    const tweetUrl = `https://twitter.com/intent/tweet?${args.join('&')}`;
  -
  .hashtag
    p
      | Tweet: 
      a(
        href=tweetUrl
        target="_blank"
      ) @#{config.author.twitter} 
        | #{config.conference.hashtag ? `#${config.conference.hashtag}` : ''}
  footer
    ul.inline
      li
        | #{config.title} by 
        a(href= config.author.link)= config.author.name
        |  (slides: 
        a(href= config.slides.link)= config.slides.link.replace('https://', '')
        | )
      li
        a(href="https://twitter.com/"+config.author.twitter).
          @#{config.author.twitter}
      li
        a(href="https://github.com/"+config.author.github).
          github.com/#{config.author.github}
