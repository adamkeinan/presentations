//- Use the presentation layout so we can keep this clean
extends layouts/presentation

block append config
  -
    config.theme = 'lengstorf';
    config.title = 'Beyond Static';
    config.description = 'Gatsby + Apollo for Fully Dynamic Apps';

    config.author = {
      name: 'Jason Lengstorf',
      email: 'jason@gatsbyjs.com',
      link: 'https://lengstorf.com/',
      twitter: 'jlengstorf',
      github: 'jlengstorf',
    };
    
    config.slides = {
      link: 'https://git.io/beyond-static',
    };

    config.conference = {
      hashtag: '',
      twitter: '',
    };
  -

//- Add your slides here. See templates/includes/_mixins.pug for information 
//- on how `+slide` works.
block slides
  +slide
    h1(style="font-size: 110px; margin-bottom: 0")= config.title
    h4= config.description
    
    p by 
      a(href= config.author.link)= config.author.name
      br
      small
        a(href= `https://twitter.com/${config.author.twitter}`)= `@${config.author.twitter}`
        | &nbsp; ¬∑ &nbsp;
        a(href= `mailto:${config.author.email}`)= config.author.email
    
    p
      small Slides: #[a(href= config.slides.link)= config.slides.link.replace('https://', '')]

  +slide
    blockquote.photo-quote
      .photo
        img(
          src="./images/jason-lengstorf.jpg"
          alt="Jason Lengstorf"
        )
      .quote
        ul(style="list-style: none;")
          li Developer ü•ë
          li Currently: Gatsby
          li Formerly: IBM
          li Portland, OR
  
  +slide
    h3
      | You should use #[em GraphQL] for everything 
      span.fragment and serve your entire app as #[em static assets]

  +slide
    h3 Development today is
      em(style="display: block;font-size: 230%") different

  +slide
    h3 The monolithic CMS is 
      strong(style="display: block; font-size: 400%") dying
    aside.notes
      ul
        li I know there are still a lot of companies using monolithic CMSs
        li The trend is clear though: most CMSs are going headless
        li WordPress, Drupal, Ghost ‚Äî even Magento!

  +slide
    h2 The future is the
      em(style="display: block; font-size: 121%") content mesh
  
  +slide
    img.no-border(src="./images/beyond-static/content-mesh.png" alt="The content mesh.")
  
  +slide
    img.no-border(src="./images/beyond-static/content-mesh-labeled.png" alt="The content mesh.")
    aside.notes
      ul
        li Specialized SaaS providers exist for pretty much every use case
        li Stripe, Shopify, Airtable, Contentful

  +slide
    h3 This is #[em amazing]
    ul
      li.fragment Manage data using purpose-built tools
      li.fragment Load data from anywhere using APIs
      li.fragment Build custom UIs that combine multiple data sources
    aside.notes
      ul
        li This has been popularized as the JAMstack

  +slide
    h3 This is #[strong terrible]
    ul
      li.fragment Atrocious performance pitfalls
      li.fragment Complex business logic to combine data sources
      li.fragment UIs can become tightly coupled to back-ends
      li.fragment State management leads to nightmarish complexity
    aside.notes
      ul
        li Tons of requests, some slow, reflows, jank, FOUC, font jumping
        li Front-end teams can end up managing a ton of business logic to parse data
        li Not the best use of their time or the best skill match
        li Even trivial back-end changes can force front-end rewrites
        li Redux, etc. can add high complexity & make it hard to onboard devs
  
  +slide
    h3 Also: async is #[strong hard]
    img(
      src="./images/beyond-static/load-jank.gif"
      alt="Page jumping during load."
      style="width: 300px; min-width: 0"
    )
    aside.notes
      ul
        li Getting async loading right is difficult, which is why we still deal with junky layouts like this regularly

  +slide
    h2 How to #[em tame] the Content Mesh
    ul
      li.fragment Centralize data access with GraphQL
      li.fragment Serve only optimized static assets

  +slide
    h3 #[em(style="display:block; font-size: 175%") Centralize] data with GraphQL
    ul
      li.fragment Better explorability
      li.fragment Single source of truth
      li.fragment More scalable & team-friendly
      li.fragment Consistent, shareable dev workflow
    aside.notes
      ul
        li Self-documenting and browser-based explorability
        li All content sources end up in the same GraphQL endpoint
        li Dev can use the same tools for UI even if the data source are different
        li Agencies: imagine not having to convince your clients to migrate but still being able to use your preferred stack

  +slide
    h3 #[em(style="display: block; font-size: 170%") Go Static] for everything
    ul
      li.fragment Blazing fast performance
      li.fragment Simpler deployment flow
      li.fragment Reduced DevOps overhead

  +slide
    h2 How this works in 
      em(style="display: block; font-size: 270%") Gatsby
    ul
      li.fragment Node APIs to load any data source into GraphQL
      li.fragment ‚ÄúEarly bind‚Äù data at build time
      li.fragment Generate static assets
      li.fragment Automate performance tuning
      li.fragment Deploy to a CDN (e.g. Netlify)
      li.fragment Rehydrate to a React app in the browser
    aside.notes
      ul
        li PRPL, image optimization, Service Worker

  +slide
    h3(style="font-size: 4.5rem") Make the #[em Right] Thing
      span(style="display: block; font-size: 147%") the #[em Easy] Thing
    p.fragment.
      Design your tools so the laziest, shortcuttiest,#[br]
      under-the-gunniest decisions a developer can make#[br]
      will still result in an excellent user experience.

  +slide
    h3(style="margin-bottom: 0.5rem;") But...
    p(style="margin-top: 0;").
      ‚ÄúIsn‚Äôt Gatsby a #[strong static] site generator?#[br]
      My app has #[strong dynamic] data!‚Äù

  +slide
    h3 static assets !== static apps

  +slide
    h3(style="font-size: 4rem;") React apps are #[em dynamic]
      span.fragment(style="display: block; font-size: 88%") #[em Gatsby sites] are React apps

  +slide
    h4(style="font-size: 2rem") Something something transitive property...
      span.fragment(style="display: block; font-size: 180%") #[em Gatsby sites] #[span.underlined are] #[em dynamic]

  +slide
    img.no-border(src="./images/beyond-static/cm1.png" alt="The Content Mesh with Gatsby.")

  +slide
    img.no-border(src="./images/beyond-static/cm2.png" alt="The Content Mesh with Gatsby.")

  +slide
    img.no-border(src="./images/beyond-static/cm3.png" alt="The Content Mesh with Gatsby.")

  +slide
    img.no-border(src="./images/beyond-static/cm4.png" alt="The Content Mesh with Gatsby.")

  +slide
    img.no-border(src="./images/beyond-static/cm5.png" alt="The Content Mesh with Gatsby.")

  +slide
    img.no-border(src="./images/beyond-static/cm6.png" alt="The Content Mesh with Gatsby.")

  +slide
    h3(style="font-size: 2.875rem") Example: Gatsby‚Äôs #[em Swag Store]
    img.no-border.no-margin(src="./images/beyond-static/store.jpg" alt="The Gatsby Store.")
    a(href="https://store.gatsbyjs.org") store.gatsbyjs.org

  +slide
    h3(style="font-size: 2.875rem") Static Data Loaded at #[em Build] Time
    img.no-border.no-margin(src="./images/beyond-static/store-static-data.jpg" alt="The Gatsby Store.")
    a(href="https://store.gatsbyjs.org") store.gatsbyjs.org

  +slide
    h3(style="font-size: 2.875rem") Dynamic Data Loaded at #[em Run] Time
    img.no-border.no-margin(src="./images/beyond-static/store-dynamic-data.jpg" alt="The Gatsby Store.")
    a(href="https://store.gatsbyjs.org") store.gatsbyjs.org

  +slide
    h3(style="font-size: 2.875rem") #[em Client-Only] Routes for User Pages
    img.no-border.no-margin(src="./images/beyond-static/store-dashboard.jpg" alt="The Gatsby Store.")
    a(href="https://store.gatsbyjs.org") store.gatsbyjs.org

  +slide
    h3(style="font-size: 2.875rem") Data Loads #[em Asynchronously]
    img.no-border.no-margin(src="./images/beyond-static/store-dashboard-data.jpg" alt="The Gatsby Store.")
    a(href="https://store.gatsbyjs.org") store.gatsbyjs.org

  +slide
    blockquote.twitter-tweet(data-lang="en")
      p(lang="en" dir="ltr").
        ü§î How easy is it to set up a 
        #[a(href="https://twitter.com/gatsbyjs?ref_src=twsrc%5Etfw") @gatsbyjs]
        app with GraphQL for data on the back-end +
        #[a(href="https://twitter.com/apollographql?ref_src=twsrc%5Etfw") @apollographql]
        for GraphQL client-side?#[br]
        #[br]
        ‚úÖ 5 files#[br]
        ‚úÖ 88 lines of code#[br]
        ‚úÖ Use both build-time and runtime GraphQL queries in the same component#[br]#[br]
        üòé Repo: #[a(href="https://t.co/lrEg41iGgx") https://t.co/lrEg41iGgx] #[a(href="https://t.co/OuKChDpIFN") pic.twitter.com/OuKChDpIFN]
        &mdash; Jason Lengstorf @ #GraphQLSummit (@jlengstorf) #[a(href="https://twitter.com/jlengstorf/status/1059834786703785985?ref_src=twsrc%5Etfw") November 6, 2018]
    script(async src="https://platform.twitter.com/widgets.js" charset="utf-8")

  +slide
    h1 üíª Live Demo
    h4(style="font-size: 2.45rem") Let‚Äôs build a #[em dynamic app] in Gatsby.
    a(href="https://github.com/jlengstorf/gatsby-with-apollo") github.com/jlengstorf/gatsby-with-apollo

  +slide
    h3 Try it yourself:
      br
      a(href="https://gatsbyjs.org") gatsbyjs.org
    //- h4.fragment (Also: #[em we‚Äôre hiring!])

  +slide
    h3
      | You should use #[em GraphQL] for everything 
      span and serve your entire app as #[em static assets]

  //- Thanks & Resources
  +slide
    h1.no-margin Thanks!
    img(
      src="./images/jason-lengstorf.jpg"
      alt="Jason Lengstorf"
      style="border-radius: 50%; width: 240px; min-width: 0; margin-bottom: 0;"
    )
    p(style="margin-top: 0.25rem;")= config.author.name
      br
      small
        | Follow me on Twitter: 
        a(href= `https://twitter.com/${config.author.twitter}`)= `@${config.author.twitter}`

  +slide.u--align-left.resourcetext
    h4 Resources
    ol
      li
        a(href="https://gatsby.app/content-mesh").
          The Journey to a Content Mesh
      li
        a(href="https://gatsbyjs.org").
          Gatsby
      li
        a(href="https://apollographql.com").
          Apollo
      li
        a(href="https://github.com/jlengstorf/gatsby-with-apollo").
          Gatsby with Apollo Demo
      li
        a(href="https://store.gatsbyjs.org").
          Gatsby‚Äôs Swag Store
      li
        a(href="https://github.com/gatsbyjs/store.gatsbyjs.org").
          Swag Store Source Code
      li
        a(href="https://github.com/gatsbyjs/api.gatsbyjs.org").
          Store API Source Code

block styles
  link(
    rel="stylesheet"
    href="//maxcdn.bootstrapcdn.com/font-awesome/4.4.0/css/font-awesome.min.css"
  )
  script.
    (function(d) {
      var config = {
        kitId: 'fnr1orp',
        scriptTimeout: 3000,
        async: true
      },
      h=d.documentElement,t=setTimeout(function(){h.className=h.className.replace(/\bwf-loading\b/g,"")+" wf-inactive";},config.scriptTimeout),tk=d.createElement("script"),f=false,s=d.getElementsByTagName("script")[0],a;h.className+=" wf-loading";tk.src='https://use.typekit.net/'+config.kitId+'.js';tk.async=true;tk.onload=tk.onreadystatechange=function(){a=this.readyState;if(f||a&&a!="complete"&&a!="loaded")return;f=true;clearTimeout(t);try{Typekit.load(config)}catch(e){}};s.parentNode.insertBefore(tk,s)
    })(document);

block scripts
  script(async src="https://platform.twitter.com/widgets.js" charset="utf-8")

block extras
  -
    const relatedAccounts = [config.author.twitter];
    
    if (config.conference.twitter) {
      relatedAccounts.push(config.conference.twitter);
    }

    // See https://dev.twitter.com/web/tweet-button/web-intent for parameters.
    const tweetObj = {
      text: `${config.title} by @${config.author.twitter}`,
      hashtags: config.conference.hashtag || '',
      related: relatedAccounts.join(','),
      url: config.slides.link,
    };

    // 
    const e = encodeURIComponent;
    const args = Object.keys(tweetObj).map(key => `${key}=${e(tweetObj[key])}`);
    const tweetUrl = `https://twitter.com/intent/tweet?${args.join('&')}`;
  -
  footer.v2
    ul.inline
      li
        a(
          href= config.slides.link
          title="View the slides online."
        )= config.slides.link.replace('https://', '')
      li
        a(
          href="https://twitter.com/"+config.author.twitter
          title="Find Jason on Twitter"
        ).
          @#{config.author.twitter}
      li
        a.no-icon(
          href=tweetUrl
        ) #{config.conference.hashtag ? `#${config.conference.hashtag}` : ''}
        
